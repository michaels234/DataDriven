AWSTemplateFormatVersion: '2010-09-09'
Description: NodeVue App - Simple Lambda + DynamoDB + API Gateway

Parameters:
  ProjectName:
    Type: String
    Default: nodevue

Resources:
  NodeVueTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-table"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  NodeVueLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-lambda"
      Runtime: nodejs16.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async function(event) {
            return {
              statusCode: 200,
              body: "Replace with real code"
            };
          };
      Environment:
        Variables:
          TABLE_NAME: !Ref NodeVueTable

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-lambda-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${ProjectName}-lambda-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Scan
                Resource: !GetAtt NodeVueTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  NodeVueApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: nodevue-api
      Description: NodeVue API for handling submissions

  NodeVueResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NodeVueApi
      ParentId: !GetAtt NodeVueApi.RootResourceId
      PathPart: submit

  NodeVueOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref NodeVueApi
      ResourceId: !Ref NodeVueResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            ResponseTemplates:
              application/json: "{}"
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  NodeVueMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref NodeVueApi
      ResourceId: !Ref NodeVueResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { Region: !Ref "AWS::Region", LambdaArn: !GetAtt NodeVueLambda.Arn }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: 400
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: 500
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  NodeVueDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - NodeVueMethod
      - NodeVueOptionsMethod
    Properties:
      RestApiId: !Ref NodeVueApi
      StageName: prod

  NodeVueLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NodeVueLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${NodeVueApi}/*/POST/submit"

Outputs:
  ApiEndpoint:
    Description: "NodeVue API endpoint"
    Value: !Sub "https://${NodeVueApi}.execute-api.${AWS::Region}.amazonaws.com/prod/submit"
